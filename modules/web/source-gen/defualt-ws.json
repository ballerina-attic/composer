{
  "PackageDeclaration": {
    "before package": "",
    "after package": " ",
    "before packageName": "",
    "after packageName": "",
    "before ;": "",
    "after ;": ""
  },
  "Import": {
    "before import": "",
    "after import": " ",
    "before packageName": "",
    "after packageName": "",
    "before ;": "",
    "after ;": ""
  },
  "Identifier": {
    "before value": "",
    "after value": ""
  },
  "Abort": {
    "before abort": "",
    "after abort": "",
    "before ;": "",
    "after ;": ""
  },
  "Action": {
    "before annotationAttachments": "",
    "after annotationAttachments": "",
    "before action": "",
    "after action": "",
    "before name": " ",
    "after name": "",
    "before (": " ",
    "after (": "",
    "before parameters": "",
    "after parameters": "",
    "before )": "",
    "after )": "",
    "before returnParameters": "",
    "after returnParameters": "",
    "before {": " ",
    "after {": "",
    "before workers": "",
    "after workers": "",
    "before }": "",
    "after }": "",
    "before body": "",
    "after body": ""
  },
  "Annotation": {
    "before annotation": "",
    "after annotation": "",
    "before name": " ",
    "after name": "",
    "before {": " ",
    "after {": "",
    "before attributes": "",
    "after attributes": "",
    "before }": "",
    "after }": "",
    "before attach": "",
    "after attach": "",
    "before resource": "",
    "after resource": ""
  },
  "AnnotationAttachment": {
    "before @": "",
    "after @": "",
    "before packageAlias": "",
    "after packageAlias": "",
    "before :": "",
    "after :": "",
    "before annotationName": "",
    "after annotationName": "",
    "before {": " ",
    "after {": "",
    "before attributes": "",
    "after attributes": "",
    "before }": "",
    "after }": ""
  },
  "AnnotationAttachmentAttribute": {
    "before name": "",
    "after name": "",
    "before :": "",
    "after :": "",
    "before value": "",
    "after value": "",
    "dent": true
  },
  "AnnotationAttachmentAttributeValue": {
    "before value": "",
    "after value": "",
    "before [": "",
    "after [": "",
    "before valueArray": "",
    "after valueArray": "",
    "before ]": "",
    "after ]": ""
  },
  "AnnotationAttribute": {
    "before typeNode": "",
    "after typeNode": "",
    "before name": "",
    "after name": "",
    "before =": "",
    "after =": "",
    "before initialExpression": "",
    "after initialExpression": ""
  },
  "ArrayLiteralExpr": {
    "before [": "",
    "after [": "",
    "before expressions": "",
    "after expressions": "",
    "before ]": "",
    "after ]": ""
  },
  "Assignment": {
    "before var": "",
    "after var": " ",
    "before variables": "",
    "after variables": "",
    "before =": " ",
    "after =": " ",
    "before expression": "",
    "after expression": "",
    "before ;": "",
    "after ;": ""
  },
  "BinaryExpr": {
    "before {{": "",
    "after {{": "",
    "before leftExpression": "",
    "after leftExpression": "",
    "before operatorKind": " ",
    "after operatorKind": " ",
    "before rightExpression": "",
    "after rightExpression": "",
    "before }}": "",
    "after }}": ""
  },
  "Block": {
    "before statements": "",
    "after statements": ""
  },
  "Break": {
    "before break": "",
    "after break": "",
    "before ;": "",
    "after ;": ""
  },
  "BuiltInRefType": {
    "before typeKind": "",
    "after typeKind": ""
  },
  "Catch": {
    "before catch": "",
    "after catch": "",
    "before (": "",
    "after (": "",
    "before parameter": "",
    "after parameter": "",
    "before )": "",
    "after )": "",
    "before {": " ",
    "after {": "",
    "before body": "",
    "after body": "",
    "before }": "",
    "after }": ""
  },
  "Comment": {
    "before comment": "",
    "after comment": "",
    "dent": true
  },
  "Connector": {
    "before annotationAttachments": "",
    "after annotationAttachments": "",
    "before connector": "",
    "after connector": "",
    "before name": " ",
    "after name": "",
    "before (": " ",
    "after (": "",
    "before parameters": "",
    "after parameters": "",
    "before )": "",
    "after )": "",
    "before {": " ",
    "after {": "",
    "before variableDefs": "",
    "after variableDefs": "",
    "before actions": "",
    "after actions": "",
    "before }": "",
    "after }": ""
  },
  "ConnectorInitExpr": {
    "before create": "",
    "after create": "",
    "before connectorType": " ",
    "after connectorType": "",
    "before (": "",
    "after (": "",
    "before expressions": "",
    "after expressions": "",
    "before )": "",
    "after )": ""
  },
  "ConstrainedType": {
    "before type": "",
    "after type": "",
    "before <": "",
    "after <": "",
    "before constraint": "",
    "after constraint": "",
    "before >": "",
    "after >": ""
  },
  "ExpressionStatement": {
    "before expression": "",
    "after expression": "",
    "before ;": "",
    "after ;": ""
  },
  "FieldBasedAccessExpr": {
    "before expression": "",
    "after expression": "",
    "before .": "",
    "after .": "",
    "before fieldName": "",
    "after fieldName": ""
  },
  "ForkJoin": {
    "before fork": "",
    "after fork": "",
    "before {": " ",
    "after {": "",
    "before workers": "",
    "after workers": "",
    "before }": "",
    "after }": "",
    "before join": "",
    "after join": "",
    "before (": "",
    "after (": "",
    "before joinType": "",
    "after joinType": "",
    "before joinCount": "",
    "after joinCount": "",
    "before joinedWorkerIdentifiers": "",
    "after joinedWorkerIdentifiers": "",
    "before )": "",
    "after )": "",
    "before joinResultVar": "",
    "after joinResultVar": "",
    "before joinBody": "",
    "after joinBody": "",
    "before timeout": "",
    "after timeout": "",
    "before timeOutExpression": "",
    "after timeOutExpression": "",
    "before timeOutVariable": "",
    "after timeOutVariable": "",
    "before timeoutBody": "",
    "after timeoutBody": ""
  },
  "Function": {
    "before annotationAttachments": "",
    "after annotationAttachments": "",
    "before function": "",
    "after function": "",
    "before (": " ",
    "after (": "",
    "before parameters": "",
    "after parameters": "",
    "before )": "",
    "after )": "",
    "before returnParameters": "",
    "after returnParameters": " ",
    "before {": " ",
    "after {": "",
    "before workers": "",
    "after workers": "",
    "before }": "",
    "after }": "",
    "before body": "",
    "after body": "",
    "before name": " ",
    "after name": ""
  },
  "FunctionType": {
    "before function": "",
    "after function": "",
    "before (": "",
    "after (": "",
    "before paramTypeNode": "",
    "after paramTypeNode": "",
    "before )": "",
    "after )": "",
    "before returns": "",
    "after returns": "",
    "before returnParamTypeNode": "",
    "after returnParamTypeNode": ""
  },
  "If": {
    "before if": "",
    "after if": "",
    "before (": " ",
    "after (": "",
    "before condition": "",
    "after condition": "",
    "before )": "",
    "after )": " ",
    "before {": "",
    "after {": "",
    "before body": "",
    "after body": "",
    "before }": "",
    "after }": "",
    "before else": " ",
    "after else": " ",
    "before elseStatement": "",
    "after elseStatement": ""
  },
  "IndexBasedAccessExpr": {
    "before expression": "",
    "after expression": "",
    "before [": "",
    "after [": "",
    "before index": "",
    "after index": "",
    "before ]": "",
    "after ]": ""
  },
  "Invocation": {
    "before expression": "",
    "after expression": "",
    "before .": "",
    "after .": "",
    "before name": "",
    "after name": "",
    "before (": "",
    "after (": "",
    "before argumentExpressions": "",
    "after argumentExpressions": "",
    "before )": "",
    "after )": "",
    "before packageAlias": "",
    "after packageAlias": "",
    "before :": "",
    "after :": ""
  },
  "Lambda": {
    "before functionNode": "",
    "after functionNode": ""
  },
  "Literal": {
    "before unescapedValue": "",
    "after unescapedValue": "",
    "before value": "",
    "after value": ""
  },
  "Next": {
    "before next": "",
    "after next": "",
    "before ;": "",
    "after ;": ""
  },
  "RecordLiteralExpr": {
    "before {": "",
    "after {": "",
    "before keyValuePairs": "",
    "after keyValuePairs": "",
    "before }": "",
    "after }": ""
  },
  "RecordLiteralKeyValue": {
    "before key": "",
    "after key": "",
    "before :": "",
    "after :": "",
    "before value": "",
    "after value": ""
  },
  "Resource": {
    "before annotationAttachments": "",
    "after annotationAttachments": "",
    "before resource": "",
    "after resource": "",
    "before name": " ",
    "after name": "",
    "before (": " ",
    "after (": "",
    "before parameters": "",
    "after parameters": "",
    "before )": "",
    "after )": "",
    "before {": " ",
    "after {": "",
    "before workers": "",
    "after workers": "",
    "before }": "",
    "after }": "",
    "before body": "",
    "after body": ""
  },
  "Retry": {
    "before retry": "",
    "after retry": "",
    "before count": " ",
    "after count": "",
    "before ;": "",
    "after ;": ""
  },
  "Return": {
    "before return": "",
    "after return": " ",
    "before expressions": " ",
    "after expressions": "",
    "before ;": "",
    "after ;": ""
  },
  "Service": {
    "before annotationAttachments": "",
    "after annotationAttachments": "",
    "before service": "",
    "after service": "",
    "before <": "",
    "after <": "",
    "before protocolPackageIdentifier": "",
    "after protocolPackageIdentifier": "",
    "before >": "",
    "after >": "",
    "before name": " ",
    "after name": "",
    "before {": " ",
    "after {": "",
    "before variables": "",
    "after variables": "",
    "before resources": "",
    "after resources": "",
    "before }": "",
    "after }": ""
  },
  "SimpleVariableRef": {
    "before {{": "",
    "after {{": "",
    "before packageAlias": "",
    "after packageAlias": "",
    "before :": "",
    "after :": "",
    "before variableName": "",
    "after variableName": "",
    "before }}": "",
    "after }}": ""
  },
  "StringTemplateLiteral": {
    "before string\\u0020`": "",
    "after string\\u0020`": "",
    "before expressions": "",
    "after expressions": "",
    "before `": "",
    "after `": ""
  },
  "Struct": {
    "before annotationAttachments": "",
    "after annotationAttachments": "",
    "before public": "",
    "after public": " ",
    "before struct": "",
    "after struct": "",
    "before name": " ",
    "after name": "",
    "before {": " ",
    "after {": "",
    "before fields": "",
    "after fields": "",
    "before }": "",
    "after }": ""
  },
  "Throw": {
    "before throw": "",
    "after throw": "",
    "before expressions": " ",
    "after expressions": "",
    "before ;": "",
    "after ;": ""
  },
  "Transaction": {
    "before transaction": "",
    "after transaction": "",
    "before {": "",
    "after {": "",
    "before transactionBody": "",
    "after transactionBody": "",
    "before }": "",
    "after }": "",
    "before failed": "",
    "after failed": "",
    "before failedBody": "",
    "after failedBody": "",
    "before committed": "",
    "after committed": "",
    "before committedBody": "",
    "after committedBody": "",
    "before aborted": "",
    "after aborted": "",
    "before abortedBody": "",
    "after abortedBody": ""
  },
  "Transform": {
    "before transform": "",
    "after transform": "",
    "before {": " ",
    "after {": "",
    "before body": "",
    "after body": "",
    "before }": "",
    "after }": ""
  },
  "Try": {
    "before try": "",
    "after try": "",
    "before {": " ",
    "after {": "",
    "before body": "",
    "after body": "",
    "before }": "",
    "after }": "",
    "before catchBlocks": "",
    "after catchBlocks": "",
    "before finally": "",
    "after finally": "",
    "before finallyBody": "",
    "after finallyBody": ""
  },
  "TypeCastExpr": {
    "before (": "",
    "after (": "",
    "before typeNode": "",
    "after typeNode": "",
    "before )": "",
    "after )": "",
    "before expression": "",
    "after expression": ""
  },
  "TypeConversionExpr": {
    "before <": "",
    "after <": "",
    "before typeNode": "",
    "after typeNode": "",
    "before >": "",
    "after >": "",
    "before expression": "",
    "after expression": ""
  },
  "UnaryExpr": {
    "before operatorKind": "",
    "after operatorKind": "",
    "before expression": " ",
    "after expression": ""
  },
  "UserDefinedType": {
    "before packageAlias": "",
    "after packageAlias": "",
    "before :": "",
    "after :": "",
    "before typeName": "",
    "after typeName": ""
  },
  "ValueType": {
    "before typeKind": "",
    "after typeKind": ""
  },
  "Variable": {
    "before annotationAttachments": "",
    "after annotationAttachments": "",
    "before public": "",
    "after public": "",
    "before const": "",
    "after const": " ",
    "before typeNode": "",
    "after typeNode": "",
    "before name": " ",
    "after name": "",
    "before =": " ",
    "after =": " ",
    "before initialExpression": "",
    "after initialExpression": "",
    "before ;": "",
    "after ;": ""
  },
  "VariableDef": {
    "before variable": "",
    "after variable": "",
    "before ;": "",
    "after ;": ""
  },
  "While": {
    "before while": "",
    "after while": "",
    "before (": " ",
    "after (": "",
    "before condition": "",
    "after condition": "",
    "before )": "",
    "after )": "",
    "before {": " ",
    "after {": "",
    "before body": "",
    "after body": "",
    "before }": "",
    "after }": ""
  },
  "Worker": {
    "before worker": "",
    "after worker": "",
    "before name": " ",
    "after name": "",
    "before {": " ",
    "after {": "",
    "before body": "",
    "after body": "",
    "before }": "",
    "after }": ""
  },
  "WorkerReceive": {
    "before expressions": "",
    "after expressions": "",
    "before <-": "",
    "after <-": "",
    "before workerName": "",
    "after workerName": "",
    "before ;": "",
    "after ;": ""
  },
  "WorkerSend": {
    "before expressions": "",
    "after expressions": "",
    "before ->": "",
    "after ->": "",
    "before fork": "",
    "after fork": "",
    "before ;": "",
    "after ;": "",
    "before workerName": "",
    "after workerName": ""
  },
  "XmlAttribute": {
    "before name": "",
    "after name": "",
    "before =": "",
    "after =": "",
    "before value": "",
    "after value": ""
  },
  "XmlAttributeAccessExpr": {
    "before expression": "",
    "after expression": "",
    "before @": "",
    "after @": "",
    "before [": "",
    "after [": "",
    "before index": "",
    "after index": "",
    "before ]": "",
    "after ]": ""
  },
  "XmlCommentLiteral": {
    "before xml`": "",
    "after xml`": "",
    "before <!--": "",
    "after <!--": "",
    "before textFragments": "",
    "after textFragments": "",
    "before -->": "",
    "after -->": "",
    "before `": "",
    "after `": ""
  },
  "XmlElementLiteral": {
    "before xml`": "",
    "after xml`": "",
    "before <": "",
    "after <": "",
    "before startTagName": "",
    "after startTagName": "",
    "before attributes": "",
    "after attributes": "",
    "before >": "",
    "after >": "",
    "before content": "",
    "after content": "",
    "before </": "",
    "after </": "",
    "before endTagName": "",
    "after endTagName": "",
    "before `": "",
    "after `": ""
  },
  "XmlPiLiteral": {
    "before target": "",
    "after target": "",
    "before dataTextFragments": "",
    "after dataTextFragments": ""
  },
  "XmlQname": {
    "before prefix": "",
    "after prefix": "",
    "before :": "",
    "after :": "",
    "before localname": "",
    "after localname": ""
  },
  "XmlQuotedString": {
    "before textFragments": "",
    "after textFragments": ""
  },
  "XmlTextLiteral": {
    "before textFragments": "",
    "after textFragments": ""
  },
  "Xmlns": {
    "before xmlns": "",
    "after xmlns": "",
    "before namespaceURI": " ",
    "after namespaceURI": "",
    "before as": " ",
    "after as": "",
    "before prefix": " ",
    "after prefix": "",
    "before ;": "",
    "after ;": "",
    "before namespaceDeclaration": "",
    "after namespaceDeclaration": ""
  }
}

