<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>integration-tests</artifactId>
        <groupId>org.ballerinalang</groupId>
        <version>0.92.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>ui-integration-tests</artifactId>
    <version>0.92.1-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>org.ballerinalang</groupId>
            <artifactId>ballerina-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.ballerinalang</groupId>
            <artifactId>ballerina-native</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.orbit.org.antlr</groupId>
            <artifactId>antlr4-runtime</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.carbon.transport</groupId>
            <artifactId>org.wso2.carbon.transport.http.netty</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.carbon.transport</groupId>
            <artifactId>org.wso2.carbon.connector.framework</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.carbon.messaging</groupId>
            <artifactId>org.wso2.carbon.messaging</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.orbit.net.sf.saxon</groupId>
            <artifactId>Saxon-HE</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.ws.commons.axiom</groupId>
            <artifactId>axiom-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.ws.commons.axiom</groupId>
            <artifactId>axiom-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>jaxen</groupId>
            <artifactId>jaxen</artifactId>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.wso2.orbit.org.apache.tapestry</groupId>-->
            <!--<artifactId>tapestry-json</artifactId>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.apache.geronimo.specs</groupId>
            <artifactId>geronimo-activation_1.1_spec</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.geronimo.specs</groupId>
            <artifactId>geronimo-stax-api_1.0_spec</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.james</groupId>
            <artifactId>apache-mime4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.beust</groupId>
            <artifactId>jcommander</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-nop</artifactId>
        </dependency>

        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-common</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-buffer</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-handler</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec-http</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-pool.wso2</groupId>
            <artifactId>commons-pool</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.orbit.org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.carbon</groupId>
            <artifactId>org.wso2.carbon.core</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wso2.staxon</groupId>
            <artifactId>staxon-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.9.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.6</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources-js</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>
                                copy-resources
                            </goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/js</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/../../modules/web/js</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-images</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>
                                copy-resources
                            </goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/images</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/../../modules/web/images</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-lib</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>
                                copy-resources
                            </goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/lib</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/../../modules/web/lib</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-css</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>
                                copy-resources
                            </goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/css</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/../../modules/web/css</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-indexjs</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>
                                copy-resources
                            </goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/../../modules/web</directory>
                                    <includes>
                                        <include>index.js</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <!--<execution>-->
                        <!--<id>copy-resources-tests</id>-->
                        <!--<phase>compile</phase>-->
                        <!--<goals>-->
                            <!--<goal>-->
                                <!--copy-resources-->
                            <!--</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<outputDirectory>${basedir}/target/tests</outputDirectory>-->
                            <!--<resources>-->
                                <!--<resource>-->
                                    <!--<directory>${basedir}/../../modules/web/js/tests</directory>-->
                                <!--</resource>-->
                            <!--</resources>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.5.2</version>
                <executions>
                    <execution>
                        <id>distribution</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>attached</goal>
                        </goals>
                        <configuration>
                            <filters>
                                <filter>${basedir}/src/test/assembly/filter.properties</filter>
                            </filters>
                            <descriptors>
                                <descriptor>${basedir}/src/test/assembly/bin.xml</descriptor>
                            </descriptors>
                            <finalName>composer-test-pack</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>prepare</id>
                        <phase>compile</phase>
                        <configuration>
                            <tasks>
                                <echo message="prepare phase"/>
                                <unzip src="target/composer-test-pack.zip" dest="target/"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.5.0</version>
                <executions>
                    <execution>
                        <id>npm install (initialize)</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>compile</phase>
                        <configuration>
                            <executable>${npm.executable}</executable>
                            <arguments>
                                <argument>install</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>npm run composer (run composer)</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>compile</phase>
                        <configuration>
                            <executable>${npm.executable}</executable>
                            <arguments>
                                <argument>run</argument>
                                <argument>composer</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- 'npm run clean' which is run in clean lifecycle needs 'rimraf' node module.
                     Make sure it is installed  -->
                    <!--<execution>-->
                    <!--<id>npm install rimraf (clean)</id>-->
                    <!--<goals>-->
                    <!--<goal>exec</goal>-->
                    <!--</goals>-->
                    <!--<phase>pre-clean</phase>-->
                    <!--<configuration>-->
                    <!--<executable>${npm.executable}</executable>-->
                    <!--<arguments>-->
                    <!--<argument>install</argument>-->
                    <!--<argument>rimraf</argument>-->
                    <!--</arguments>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                    <!--<execution>-->
                    <!--<id>npm run clean (clean)</id>-->
                    <!--<goals>-->
                    <!--<goal>exec</goal>-->
                    <!--</goals>-->
                    <!--<phase>clean</phase>-->
                    <!--<configuration>-->
                    <!--<executable>${npm.executable}</executable>-->
                    <!--<arguments>-->
                    <!--<argument>run</argument>-->
                    <!--<argument>clean</argument>-->
                    <!--</arguments>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                    <!--<execution>-->
                    <!--<id>npm run build (compile)</id>-->
                    <!--<goals>-->
                    <!--<goal>exec</goal>-->
                    <!--</goals>-->
                    <!--<phase>compile</phase>-->
                    <!--<configuration>-->
                    <!--<executable>${npm.executable}</executable>-->
                    <!--<arguments>-->
                    <!--<argument>run</argument>-->
                    <!--<argument>build</argument>-->
                    <!--</arguments>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                    <!--Commenting as these are integration tests and should be moved to tools.-->
                    <execution>
                        <id>npm run test (test)</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>integration-test</phase>
                        <configuration>
                            <executable>npm</executable>
                            <arguments>
                                <argument>run</argument>
                                <argument>test</argument>
                                <argument>skipTests=${maven.test.skip}</argument>
                            </arguments>
                            <skip>${maven.test.skip}</skip>
                        </configuration>
                    </execution>
                    <!--<execution>-->
                        <!--<id>npm run ui test (test)</id>-->
                        <!--<goals>-->
                            <!--<goal>exec</goal>-->
                        <!--</goals>-->
                        <!--<phase>test</phase>-->
                        <!--<configuration>-->
                            <!--<executable>npm</executable>-->
                            <!--<arguments>-->
                                <!--<argument>run</argument>-->
                                <!--<argument>ui-test</argument>-->
                                <!--<argument>&#45;&#45;</argument>-->
                                <!--<argument>&#45;&#45;skipTests=${maven.test.skip}</argument>-->
                            <!--</arguments>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <!--<execution>-->
                        <!--<id>npm run terminate</id>-->
                        <!--<goals>-->
                            <!--<goal>exec</goal>-->
                        <!--</goals>-->
                        <!--<phase>test</phase>-->
                        <!--<configuration>-->
                            <!--<executable>npm</executable>-->
                            <!--<arguments>-->
                                <!--<argument>run</argument>-->
                                <!--<argument>terminate</argument>-->
                                <!--<argument>&#45;&#45;</argument>-->
                                <!--<argument>&#45;&#45;skipTests=${maven.test.skip}</argument>-->
                            <!--</arguments>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <execution>
                        <id>npm run terminate</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <executable>npm</executable>
                            <arguments>
                                <argument>run</argument>
                                <argument>terminate</argument>
                                <argument>--</argument>
                                <argument>--skipTests=${maven.test.skip}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!-- <inherited>false</inherited> -->
                <configuration>
                    <argLine>-Dfile.encoding=UTF-8</argLine>
                    <environmentVariables>
                        <testEnvironmentVariable>EnvironmentVariable</testEnvironmentVariable>
                    </environmentVariables>
                    <suiteXmlFiles>
                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
                    </suiteXmlFiles>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/test/resources/ballerina-home/bin/</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/version.txt</include>
                </includes>
            </resource>
        </resources>
    </build>
    <properties>
        <maven.test.skip>false</maven.test.skip>
        <npm.executable>npm</npm.executable>
    </properties>
</project>
